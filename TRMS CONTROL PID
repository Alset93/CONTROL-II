TRO
#include <Wire.h>
#include <Servo.h>


Servo right_prop;
Servo left_prop;


int16_t Acc_rawX, Acc_rawY, Acc_rawZ,Gyr_rawX, Gyr_rawY, Gyr_rawZ;
 

float Acceleration_angle[2];
float Gyro_angle[2];
float Total_angle[2];




float elapsedTime, time, timePrev;
int i;
float rad_to_deg = 180/3.141592654;

float PID, pwmLeft, pwmRight, error, previous_error;
float pid_p=0;
float pid_i=0;
float pid_d=0;
/////////////////CONSTANTES DE PID/////////////////
double kp=3.47654;//3.55;3.55
double ki=0.003;//0.003;0.003
double kd=1.5;//2.05;2.05
///////////////////////////////////////////////

double throttle=1200; //VALOR INICIAL DE MOTOR
float desired_angle = 0; //SET POINT


void setup() {
  Wire.begin(); 
  Wire.beginTransmission(0x68);
  Wire.write(0x6B);
  Wire.write(0);
  Wire.endTransmission(true);
  Serial.begin(250000);
  right_prop.attach(8); //MOTOR PRINCIPAL
  left_prop.attach(9);  //MOTOR TRASERO

  time = millis(); 
  left_prop.writeMicroseconds(1000); 
  right_prop.writeMicroseconds(1000);
  delay(7000); 
}

void loop() {

/////////////////////////////I M U/////////////////////////////////////
    timePrev = time;  
    time = millis(); 
    elapsedTime = (time - timePrev) / 1000; 
     
     Wire.beginTransmission(0x68);
     Wire.write(0x3B); 
     Wire.endTransmission(false);
     Wire.requestFrom(0x68,6,true); 
   
     Acc_rawX=Wire.read()<<8|Wire.read(); 
     Acc_rawY=Wire.read()<<8|Wire.read();
     Acc_rawZ=Wire.read()<<8|Wire.read();

 
     /*---X---*/
     Acceleration_angle[0] = atan((Acc_rawY/16384.0)/sqrt(pow((Acc_rawX/16384.0),2) + pow((Acc_rawZ/16384.0),2)))*rad_to_deg;
     /*---Y---*/
     Acceleration_angle[1] = atan(-1*(Acc_rawX/16384.0)/sqrt(pow((Acc_rawY/16384.0),2) + pow((Acc_rawZ/16384.0),2)))*rad_to_deg;
 
   
    
   Wire.beginTransmission(0x68);
   Wire.write(0x43); 
   Wire.endTransmission(false);
   Wire.requestFrom(0x68,4,true); 
   
   Gyr_rawX=Wire.read()<<8|Wire.read(); 
   Gyr_rawY=Wire.read()<<8|Wire.read();
 
   /*---X---*/
   Gyro_angle[0] = Gyr_rawX/131.0; 
   /*---Y---*/
   Gyro_angle[1] = Gyr_rawY/131.0;

   

   /*---ANGULO EJE X---*/
   Total_angle[0] = 0.98 *(Total_angle[0] + Gyro_angle[0]*elapsedTime) + 0.02*Acceleration_angle[0];
   /*---ANGULO EJE Y---*/
   Total_angle[1] = 0.98 *(Total_angle[1] + Gyro_angle[1]*elapsedTime) + 0.02*Acceleration_angle[1];
   
   
/*///////////////////////////P I D///////////////////////////////////*/

error = Total_angle[0] - desired_angle;

 

pid_p = kp*error;

/*LA PARTE INTEGRAL SOLO DEBERÍA ACTUAR SI ESTAMOS CERCA DE LA
POSICIÓN DESEADA, PERO QUEREMOS AJUSTAR EL ERROR. ESO ES
¿POR QUÉ HICE UNA OPERACIÓN IF PARA UN ERROR ENTRE -5 Y 5 GRADOS?
PARA INTEGRARLO, SOLO SUMAMOS EL VALOR INTEGRAL ANTERIOR CON EL
ERROR MULTIPLICADO POR LA CONSTANTE INTEGRAL. ESTO SE INTEGRARÁ (AUMENTARÁ)
EL VALOR DE CADA CICLO HASTA QUE LLEGUEMOS AL PUNTO 0
*/
if(-5 <error <5)
{
  pid_i = pid_i+(ki*error);  
}


pid_d = kd*((error - previous_error)/elapsedTime);


PID = pid_p + pid_i + pid_d;

if(PID < -1000)
{
  PID=-1000;
}
if(PID > 1000)
{
  PID=1000;
}


pwmLeft = throttle + PID;
pwmRight = throttle - PID;

//Right
if(pwmRight < 1000)
{
  pwmRight= 1000;
}
if(pwmRight > 1400)
{
  pwmRight=1400;
}
//Left
if(pwmLeft < 1000)
{
  pwmLeft= 1000;
}
if(pwmLeft > 1400)
{
  pwmLeft=1400;
}


left_prop.writeMicroseconds(pwmLeft);
right_prop.writeMicroseconds(pwmRight);

Serial.print(Total_angle[0]);
Serial.print(" --- ");
Serial.print(error);
Serial.print(" --- ");
Serial.print(pwmLeft);
Serial.print(" --- ");
Serial.println(pwmRight);

}
 
